####### Ethereum Coding ##########

## Version declaration ## 
pragma solidity ^0.4.0; 

## Import ## 
At a global level, import statements of the following form:
import "filename";
import * as symbolName from "filename";
import "github.com/ethereum/dapp-bin/library/iterable_mapping.sol" as it_mapping;

Eample: 
file 1: - library.sol
pragma solidity ^0.4.17; 

contract Libraries{
    function test(){}
}

File 2: - userLibrary.sol

pragma solidity ^0.4.17; 
import "browser/library.sol";
contract useLibraries is Libraries{
    
}

## Comments -- like JavaScript ##
//, /* commented text */ 

## Variable Types and assign value ##
For public state variables, an automatic getter function is generated. 
State variables can be declared as constant. In this case, they have to be assigned from an expression which is a constant at compile time.  

# boolian #
bool: values - True or false 
Operators: ! (logical negation), && (logical conjunction, “and”), || (logical disjunction, “or”)
== (equality), != (inequality)

# Integers #
int - signed integers 
uint - unsigned integers
forms: int8 to int256, uint8 to uint256 
Operators:
Comparisons: <=, <, ==, !=, >=, > (evaluate to bool)
Bit operators: &, |, ^ (bitwise exclusive or), ~ (bitwise negation)Bit operations are performed on the two’s complement representation of the number. This means that, for example ~int256(0) == int256(-1).
Shift operators: << (left shift), >> (right shift) The result of a shift operation has the type of the left operand. The expression x << y is equivalent to x * 2**y, and, for positive integers, x >> y is equivalent to x / 2**y. For negative x, x >> y is equivalent to dividing by a power of 2 while rounding down (towards negative infinity)
Arithmetic operators: +, -, unary -, *, /, % (modulo), ** (exponentiation)

# String #
String literals are written with either double or single-quotes ("foo" or 'bar').
String literals support the following escape characters:
\<newline> (escapes an actual newline)
\\ (backslash), \' (single quote), \" (double quote), \b (backspace), \f (form feed)
\n (newline), \r (carriage return), \t (tab), \v (vertical tab), \xNN (hex escape, see below)
\uNNNN (unicode escape, see below)

# Fixed Point Numbers # 
What is Fixed point: The value 1.23 can be represented as 1230 in a fixed-point data type with scaling factor of 1/1000, and the value 1,230,000 can be represented as 1230 with a scaling factor of 1000.
fixed / ufixed: Signed and unsigned fixed point number of various sizes. 
ufixedMxN and fixedMxN, where M represents the number of bits taken by the type and N represents how many decimal points are available
Operators:
Comparisons: <=, <, ==, !=, >=, > (evaluate to bool)
Arithmetic operators: +, -, unary -, *, /, % (modulo)

# Hexadecimal  #
Hexadecimal literals are prefixed with the keyword hex and are enclosed in double or single-quotes (hex"001122FF"). 

# Address #
address: Holds a 20 byte value (size of an Ethereum address)
address payable: Same as address, but with the additional members transfer and send 
address payable to address are allowed, whereas conversions from address to address payable are not possible
Operators: <=, <, ==, !=, >= and >
.balance and .transfer
Example: 
address payable x = address(0x123);
address myAddress = address(this);
if (x.balance < 10 && myAddress.balance >= 10) x.transfer(10);
.call, .delegatecall and .staticcall
all take a single bytes memory parameter and return the success condition (as a bool) and the returned data (bytes memory). The functions abi.encode, abi.encodePacked, abi.encodeWithSelector and abi.encodeWithSignature can be used to encode structured data.

It is possible to adjust the supplied gas with the .gas() modifier:
address(nameReg).call.gas(1000000)(abi.encodeWithSignature("register(string)", "MyName"));

Similarly, the supplied Ether value can be controlled too:
address(nameReg).call.value(1 ether)(abi.encodeWithSignature("register(string)", "MyName"));

Lastly, these modifiers can be combined. Their order does not matter:
address(nameReg).call.gas(1000000).value(1 ether)(abi.encodeWithSignature("register(string)", "MyName"));

# Enums #
Enums are one way to create a user-defined type in Solidity. 
Example: 
 enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }
 ActionChoices choice;
 ActionChoices constant defaultChoice = ActionChoices.GoStraight;

# arrays #
The type of an array of fixed size k and element type T is written as T[k], and an array of dynamic size as T[].
an array of 5 dynamic arrays of uint is written as uint[][5]
Indices are zero-based, and access is in the opposite direction of the declaration.
m_byteData[3] = 0x08;

.push() method to append a new element at the end or assign to the 
m_pairsOfFlags.push(flag);
.length member to change the size. method or increase the .length member to add elements.
 m_pairsOfFlags.length = newSize;
pop that you can use to remove an element from the end of the array
It is possible to mark arrays public and have Solidity create a getter. 
new keyword to create arrays with a runtime-dependent length in memory. 
uint[2][] memory arrayOfPairs = new uint[2][](size);
delete on each of the removed elements. 
 delete m_byteData[2];

Operators:
Comparisons: <=, <, ==, !=, >=, > (evaluate to bool)
Bit operators: &, |, ^ (bitwise exclusive or), ~ (bitwise negation)
Shift operators: << (left shift), >> (right shift)
Index access: If x is of type bytesI, then x[k] for 0 <= k < I returns the k th byte (read-only).

# Structs #
Solidity provides a way to define new types in the form of structs
    
    struct Funder {
        address addr;
        uint amount;
    }

    struct Campaign {
        address payable beneficiary;
        uint fundingGoal;
        uint numFunders;
        uint amount;
        mapping (uint => Funder) funders;
    }
 Struct types can be used inside mappings and arrays and they can itself contain mappings and arrays.
 directly access the members of the struct without assigning it to a local variable, as in campaigns[campaignID].amount = 0.

pragma solidity >=0.4.16 <0.6.0;
contract A {
    struct Request{
        string description; 
        address sender; 
    }
    Request[] public requests; 
    function createRequest(string memory _description) public payable {
        
        Request memory newRequest = Request({
            description: _description, 
            sender: msg.sender 
        });
        requests.push(newRequest); 
    }
    
}

##### Reference ######
Reference types comprise structs, arrays and mappings

A reference type explicitly provide the data area where the type is stored: 
memory: whose lifetime is limited to a function call, 
storage: the location where the state variables are stored
calldata: special data location that contains the function arguments, only available for external function call parameters

Every reference type, i.e. arrays and structs, has an additional annotation, the “data location”, about where it is stored. 
There are three data locations: memory, storage and calldata.
 
Assignments between storage and memory (or from calldata) always create an independent copy.
Assignments from memory to memory only create references. This means that changes to one memory variable are also visible in all other memory variables that refer to the same data.
Assignments from storage to a local storage variable also only assign a reference.
All other assignments to storage always copy.  

# Mapping # 
Mapping is like Hash table. 
key data is not stored in a mapping, only its keccak256 hash is used to look up the value.
Mappings do not have a length or a concept of a key or value being set.

Mapping types with the syntax mapping(_KeyType => _ValueType). 
_KeyType can be any elementary type like built-in value types plus bytes and string, contract, enums, mappings, structs and array. 
_ValueType can be any type, including mappings.
Mappings can only have a data location of storage
For mapping type as public and Solidity creates a getter
_KeyType becomes a parameter for the getter. 
If _ValueType is a value type or a struct, the getter returns _ValueType. 
If _ValueType is an array or a mapping, the getter has one parameter for each _KeyType,
The mapping or the dynamic array itself occupies a slot in storage at some position p

Mapping and dynamically-sized array types use a Keccak-256 hash computation to find the starting position of the value or the array data. 
These starting positions are always full stack slots.
Array data is located at keccak256(p)
the value corresponding to a mapping key k is located at keccak256(k . p) where . is concatenation
Example 1:
pragma solidity ^0.5.0; 

contract MappingExample {

    mapping(address => uint) balances;

    function transfer() public payable {
        balances[msg.sender] += msg.value;
    }
    
    function balance() public view returns(uint){
        return balances[msg.sender];        
    }
}

Example 2: 

pragma solidity >=0.4.0 <0.6.0;

contract mappingTest{
  
    struct scheme {
        uint amount;
        string name; 
    }
    mapping (address => scheme) schemes; 
    address[] schemeList;
    
    function setScheme(string _name) public payable {
        
        scheme memory NewScheme = scheme({
            amount: msg.value, 
            name:_name
        }); 
        schemes[msg.sender] = NewScheme;
        schemeList.push(msg.sender) -1;
    
    }
    
    function getSchemeList() public view returns(address[]){
        return schemeList;
    }
    
    function getScheme(address ins) view public returns (uint, string) {
        return (schemes[ins].amount, schemes[ins].name);
    }
    
}

Example 3:

# Operator #
a += e is equivalent to a = a + e. 
The operators -=, *=, /=, %=, |=, &= and ^= are defined accordingly. 
a++ and a-- are equivalent to a += 1 / a -= 1 but the expression itself still has the previous value of a. 
In contrast, --a and ++a have the same effect on a but return the value after the change.

# Delete #

        delete x; // sets x to 0, does not affect data
        delete data; // sets data to 0, does not affect x
        
 # Conversions #
 
####### Contract ####### 
Class:Contracts in Solidity are similar to classes. 
Contents: They contain persistent data in state variables and functions that can modify these variables.Each contract can contain declarations of State Variables, Functions, Function Modifiers, Events, Struct Types and Enum Types.
Inherit: Contracts can inherit from other contracts.
Creation: Contracts can be created “from outside” via Ethereum transactions or from within Solidity contracts.
Constructor: When a contract is created, its function constructor is executed once.(onstructor is optional. one constructor is allowed)
Deployment: This code includes all public and external functions and all functions that are reachable from there through function calls. The deployed code does not include the constructor code or internal functions only called from the constructor.
Visibility:Everything that is inside a contract is visible to all observers external to the blockchain. Making something private only prevents other contracts from accessing and modifying the information.

# Abstract Contracts # 
Contracts are marked as abstract when at least one of their functions lacks an implementation as in the following example (note that the function declaration header is terminated by ;):
pragma solidity >=0.4.0 <0.6.0;
contract Feline {
    function utterance() public returns (bytes32);
}
Such contracts cannot be compiled, but they can be used as base contracts:

# Interfaces #
Interfaces are similar to abstract contracts, but they cannot have any functions implemented. There are further restrictions:
They cannot inherit other contracts or interfaces.
All declared functions must be external.
They cannot declare a constructor.
They cannot declare state variables.
pragma solidity >=0.5.0 <0.6.0;

interface Token {
    enum TokenType { Fungible, NonFungible }
    struct Coin { string obverse; string reverse; }
    function transfer(address recipient, uint amount) external;
}
Contracts can inherit interfaces as they would inherit other contracts.

Types defined inside interfaces and other contract-like structures can be accessed from other contracts: Token.TokenType or Token.Coin.

# Libraries # 
Libraries are similar to contracts, but their purpose is that they are deployed only once at a specific address
if library functions are called, their code is executed in the context of the calling contract, i.e. this points to the calling contract, and especially the storage from the calling contract can be accessed. 

-- Need More clarifications -- 


# Visibility and Getters #

######## Funtion Types ####### 
Functions are the executable units of code within a contract.
 
function (<parameter types>) {internal|external} [pure|view|payable] [returns (<return types>)]

Using pure and view functions allows these functions to consume zero gas, because they are not modifying state. 
- View: Functions can be declared view in which case they promise not to modify the state.
- Pure: Functions can be declared pure in which case they promise not to read from or modify the state.
- Payable: if a function is payable, this means that it also accepts a payment of zero Ether, a non-payable function will reject Ether sent to it.

Functions have to be specified as being external, public, internal or private 
- private:Private functions are only visible for the contract they are defined in and not in derived contracts.
- internal: functions can only be accessed internally, without using this.
- external: External functions are part of the contract interface, which means they can be called from other contracts and via transactions. An external function f cannot be called internally (i.e. f() does not work, but this.f() works). External functions are sometimes more efficient when they receive large arrays of data.
- Public: public:
Public functions are part of the contract interface and can be either called internally or via messages. For public state variables, an automatic getter function (see below) is generated.
-Selector: Public functions also have a special member called selector, which returns the ABI function selector

pragma solidity >=0.4.16 <0.6.0;
contract Selector {
  function f() public pure returns (bytes4) {
    return this.f.selector;
  }
}

# Getter Functions #
The compiler automatically creates getter functions for all public state variables.
The getter functions have external visibility. If the symbol is accessed internally, it evaluates to a state variable. 
If it is accessed externally (i.e. with this.), it evaluates to a function.
If you have a public state variable of array type, then you can only retrieve single elements of the array via the generated getter function.

pragma solidity >=0.4.0 <0.6.0;
contract C {
    uint public data;
    function x() public returns (uint) {
        data = 3; // internal access
        return this.data(); // external access
    }
}

# Function Modifer #
Modifiers can be used to easily change the behaviour of functions. For example, they can automatically check a condition prior to executing the function. 
Modifiers are inheritable properties of contracts and may be overridden by derived contracts.

   modifier onlyOwner {
        require(
            msg.sender == owner,
            "Only owner can call this function."
        );
        _;
    }

Function return variables are declared with the same syntax after the returns keyword.

# Fallback Function #
A contract can have exactly one unnamed function. This function cannot have arguments, cannot return anything and has to have external visibility.
 this function is executed whenever the contract receives plain Ether (without data). 
 can still use msg.data to retrieve any payload supplied with the call.
 
 function() external { x = 1; }
 function() external payable { }
 
return variables and then leave the function using return
Returning Multiple Values: When a function has multiple return types, the statement return (v0, v1, ..., vn) can be used to return multiple values. vn) can return multiple values. The number of components must be the same as the number of return types.

# Function Overloading #
A contract can have multiple functions of the same name but with different parameter types. 
This process is called “overloading” and also applies to inherited functions. 

pragma solidity >=0.4.16 <0.6.0;
contract A {
    function f(uint _in) public pure returns (uint out) {
        out = _in;
    }

    function f(uint _in, bool _really) public pure returns (uint out) {
        if (_really)
            out = _in;
    }
}

# Event #
Solidity events give an abstraction on top of the EVM’s logging functionality
The Log and its event data is not accessible from within contracts

pragma solidity ^0.4.17;

contract testEvent{
    event logSenderAddress(address);
    event logValue(uint);
    
    function () public payable{
        logSenderAddress(msg.sender);
        logValue(msg.value);
    }
    
    
}

# Built in Functions #
built-in functions keccak256, sha256, ripemd160, ecrecover, addmod and mulmod 
- Hash Function 
bytes32 constant public myHash = keccak256("abc");


# Inheritance # 
Solidity supports multiple inheritance including polymorphism.
All function calls are virtual, which means that the most derived function is called, except when the contract name is explicitly given or the super keyword is used.

pragma solidity >0.4.99 <0.6.0;
contract owned {
    constructor() public { owner = msg.sender; }
    address payable owner;
}
contract mortal is owned {
    function kill() public {
        if (msg.sender == owner) selfdestruct(owner);
    }
}

# Constructors #
A constructor is an optional function declared with the constructor keyword which is executed upon contract creation, and where the contract initialisation code is executed.
Before the constructor code is executed, state variables are initialised to their specified value 
After the constructor has run, the final code of the contract is deployed to the blockchain. The deployment of the code costs additional gas linear to the length of the code.
Constructor functions can be either public or internal. If there is no constructor, the contract will assume the default constructor, which is equivalent to constructor() public {}.

Arguments for Base Constructors
The constructors of all the base contracts will be called following the linearization rules explained below. If the base constructors have arguments, derived contracts need to specify all of them. This can be done in two ways:

pragma solidity >=0.4.22 <0.6.0;

contract testGlobalFunction{
    
    
    constructor () public{
        //code
        
    }
    
}

pragma solidity >=0.4.22 <0.6.0;

contract Base {
    uint x;
    constructor(uint _x) public { x = _x; }
}

// Either directly specify in the inheritance list...
contract Derived1 is Base(7) {
    constructor() public {}
}

// or through a "modifier" of the derived constructor.
contract Derived2 is Base {
    constructor(uint _y) Base(_y * _y) public {}
}


Useful Commands:
address(this).balance or <address>.balance 
msg.sig 
msg.data
bytes32 constant public myHash = keccak256("abc"); //hasing 
if (msg.sender == owner) selfdestruct(owner);


########## Units and Globally Available Variables ########################
#Ether Units: A literal number can take a suffix of wei, finney, szabo or ether to specify a subdenomination of Ether, where Ether numbers without a postfix are assumed to be Wei.

assert(1 wei == 1);
assert(1 szabo == 1e12);
assert(1 finney == 1e15);
assert(1 ether == 1e18);

#Time Units
Suffixes like seconds, minutes, hours, days and weeks after literal numbers can be used to specify units of time where seconds are the base unit and units are considered naively in the following way:

1 == 1 seconds
1 minutes == 60 seconds
1 hours == 60 minutes
1 days == 24 hours
1 weeks == 7 days

function f(uint start, uint daysAfter) public {
    if (now >= start + daysAfter * 1 days) {
      // ...
    }
}

# Block and Transaction Properties #

blockhash(uint blockNumber) returns (bytes32): hash of the given block - only works for 256 most recent, excluding current, blocks
block.coinbase (address payable): current block miner’s address
block.difficulty (uint): current block difficulty
block.gaslimit (uint): current block gaslimit
block.number (uint): current block number
block.timestamp (uint): current block timestamp as seconds since unix epoch
gasleft() returns (uint256): remaining gas
msg.data (bytes calldata): complete calldata
msg.sender (address payable): sender of the message (current call)
msg.sig (bytes4): first four bytes of the calldata (i.e. function identifier)
msg.value (uint): number of wei sent with the message
now (uint): current block timestamp (alias for block.timestamp)
tx.gasprice (uint): gas price of the transaction
tx.origin (address payable): sender of the transaction (full call chain)

pragma solidity >=0.4.22 <0.6.0;

contract testGlobalFunction{
    
    struct GlobalFunction{
        address coinbase; 
        uint difficulty; 
        uint gasLimit; 
        uint blockNumber; 
        uint timeStamp; 
        bytes data; 
        address sender; 
        bytes4 signature; 
        uint value; 
        uint currentTime; 
        uint gasPrice;
        address origin; 
    }
    
    GlobalFunction[] public Global; 
    
    constructor () public payable{
    
        GlobalFunction memory newGlobal = GlobalFunction({
            coinbase: block.coinbase,
            difficulty: block.difficulty, 
            gasLimit: block.gaslimit, 
            blockNumber: block.number, 
            timeStamp: block.timestamp, 
            data: msg.data,
            sender: msg.sender,
            signature: msg.sig,
            value: msg.value,
            currentTime: now, 
            gasPrice: tx.gasprice, 
            origin: tx.origin
        });
        
        Global.push(newGlobal);    
        
        
    }
}


# Error Handling #
See the dedicated section on assert and require for more details on error handling and when to use which function.

assert(bool condition):
causes an invalid opcode and thus state change reversion if the condition is not met - to be used for internal errors.

require(bool condition):
reverts if the condition is not met - to be used for errors in inputs or external components.
require(bool condition, string memory message):
reverts if the condition is not met - to be used for errors in inputs or external components. Also provides an error message.

revert():
abort execution and revert state changes
revert(string memory reason):
abort execution and revert state changes, providing an explanatory string

# Mathematical and Cryptographic Functions #

addmod(uint x, uint y, uint k) returns (uint):
compute (x + y) % k where the addition is performed with arbitrary precision and does not wrap around at 2**256. Assert that k != 0 starting from version 0.5.0.
mulmod(uint x, uint y, uint k) returns (uint):
compute (x * y) % k where the multiplication is performed with arbitrary precision and does not wrap around at 2**256. Assert that k != 0 starting from version 0.5.0.
keccak256(bytes memory) returns (bytes32):
compute the Keccak-256 hash of the input
sha256(bytes memory) returns (bytes32):
compute the SHA-256 hash of the input
ripemd160(bytes memory) returns (bytes20):
compute RIPEMD-160 hash of the input
ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address):

# Members of Address Types #
<address>.balance (uint256):
<address payable>.transfer(uint256 amount):
<address payable>.send(uint256 amount) returns (bool):
<address>.call(bytes memory) returns (bool, bytes memory):
<address>.delegatecall(bytes memory) returns (bool, bytes memory):
<address>.staticcall(bytes memory) returns (bool, bytes memory):



